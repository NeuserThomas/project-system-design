apiVersion: v1
items:
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"annotations":{},"name":"kafka","namespace":"kafka"},"spec":{"podManagementPolicy":"Parallel","replicas":1,"selector":{"matchLabels":{"app":"kafka"}},"serviceName":"broker","template":{"metadata":{"annotations":null,"labels":{"app":"kafka"}},"spec":{"containers":[{"command":["./bin/kafka-server-start.sh","/etc/kafka/server.properties","--override","default.replication.factor=1","--override","min.insync.replicas=1","--override","offsets.topic.replication.factor=1","--override","offsets.topic.num.partitions=1","--override","advertised.listeners=PLAINTEXT://:9092,OUTSIDE://localhost:9094","--override","auto.create.topics.enable=true","--override","num.partitions=1","--override","advertised.listeners=PLAINTEXT://:9092,OUTSIDE://localhost:9094","--override","auto.create.topics.enable=true","--override","num.partitions=1"],"env":[{"name":"CLASSPATH","value":"/opt/kafka/libs/extensions/*"},{"name":"KAFKA_LOG4J_OPTS","value":"-Dlog4j.configuration=file:/etc/kafka/log4j.properties"},{"name":"JMX_PORT","value":""}],"image":"solsson/kafka:2.2.1@sha256:450c6fdacae3f89ca28cecb36b2f120aad9b19583d68c411d551502ee8d0b09b","lifecycle":{"preStop":{"exec":{"command":["sh","-ce","kill -s TERM 1; while $(kill -0 1 2\u003e/dev/null); do sleep 1; done"]}}},"name":"broker","ports":[{"containerPort":9092,"name":"inside"},{"containerPort":9094,"name":"outside"},{"containerPort":5555,"name":"jmx"}],"readinessProbe":{"tcpSocket":{"port":9092},"timeoutSeconds":1},"resources":{"limits":{"memory":"600Mi"},"requests":{"cpu":"100m","memory":"100Mi"}},"volumeMounts":[{"mountPath":"/etc/kafka","name":"config"},{"mountPath":"/var/lib/kafka/data","name":"data"},{"mountPath":"/opt/kafka/libs/extensions","name":"extensions"}]}],"initContainers":[{"command":["/bin/bash","/etc/kafka-configmap/init.sh"],"env":[{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}},{"name":"POD_NAME","valueFrom":{"fieldRef":{"fieldPath":"metadata.name"}}},{"name":"POD_NAMESPACE","valueFrom":{"fieldRef":{"fieldPath":"metadata.namespace"}}}],"image":"solsson/kafka-initutils@sha256:f6d9850c6c3ad5ecc35e717308fddb47daffbde18eb93e98e031128fe8b899ef","name":"init-config","volumeMounts":[{"mountPath":"/etc/kafka-configmap","name":"configmap"},{"mountPath":"/etc/kafka","name":"config"},{"mountPath":"/opt/kafka/libs/extensions","name":"extensions"}]}],"terminationGracePeriodSeconds":30,"volumes":[{"emptyDir":{},"name":"data"},{"configMap":{"name":"broker-config"},"name":"configmap"},{"emptyDir":{},"name":"config"},{"emptyDir":{},"name":"extensions"}]}},"updateStrategy":{"type":"RollingUpdate"},"volumeClaimTemplates":[]}}
    creationTimestamp: "2020-01-08T13:57:27Z"
    generation: 1
    name: kafka
    namespace: kafka
    resourceVersion: "249824"
    selfLink: /apis/apps/v1/namespaces/kafka/statefulsets/kafka
    uid: 62468dda-ecfe-4482-95e4-8c104c8bc39e
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kafka
    serviceName: broker
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kafka
          choas: immune
      spec:
        containers:
        - command:
          - ./bin/kafka-server-start.sh
          - /etc/kafka/server.properties
          - --override
          - default.replication.factor=1
          - --override
          - min.insync.replicas=1
          - --override
          - offsets.topic.replication.factor=1
          - --override
          - offsets.topic.num.partitions=1
          - --override
          - advertised.listeners=PLAINTEXT://:9092,OUTSIDE://localhost:9094
          - --override
          - auto.create.topics.enable=true
          - --override
          - num.partitions=1
          - --override
          - advertised.listeners=PLAINTEXT://:9092,OUTSIDE://localhost:9094
          - --override
          - auto.create.topics.enable=true
          - --override
          - num.partitions=1
          env:
          - name: CLASSPATH
            value: /opt/kafka/libs/extensions/*
          - name: KAFKA_LOG4J_OPTS
            value: -Dlog4j.configuration=file:/etc/kafka/log4j.properties
          - name: JMX_PORT
          image: solsson/kafka:2.2.1@sha256:450c6fdacae3f89ca28cecb36b2f120aad9b19583d68c411d551502ee8d0b09b
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - sh
                - -ce
                - kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done
          name: broker
          ports:
          - containerPort: 9092
            name: inside
            protocol: TCP
          - containerPort: 9094
            name: outside
            protocol: TCP
          - containerPort: 5555
            name: jmx
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9092
            timeoutSeconds: 1
          resources:
            limits:
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/kafka
            name: config
          - mountPath: /var/lib/kafka/data
            name: data
          - mountPath: /opt/kafka/libs/extensions
            name: extensions
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/bash
          - /etc/kafka-configmap/init.sh
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: solsson/kafka-initutils@sha256:f6d9850c6c3ad5ecc35e717308fddb47daffbde18eb93e98e031128fe8b899ef
          imagePullPolicy: IfNotPresent
          name: init-config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/kafka-configmap
            name: configmap
          - mountPath: /etc/kafka
            name: config
          - mountPath: /opt/kafka/libs/extensions
            name: extensions
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: data
        - configMap:
            defaultMode: 420
            name: broker-config
          name: configmap
        - emptyDir: {}
          name: config
        - emptyDir: {}
          name: extensions
    updateStrategy:
      type: RollingUpdate
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: kafka-86b8b784cc
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: kafka-86b8b784cc
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"annotations":{},"name":"pzoo","namespace":"kafka"},"spec":{"podManagementPolicy":"Parallel","replicas":1,"selector":{"matchLabels":{"app":"zookeeper","storage":"persistent"}},"serviceName":"pzoo","template":{"metadata":{"annotations":null,"labels":{"app":"zookeeper","storage":"persistent"}},"spec":{"containers":[{"command":["./bin/zookeeper-server-start.sh","/etc/kafka/zookeeper.properties"],"env":[{"name":"KAFKA_LOG4J_OPTS","value":"-Dlog4j.configuration=file:/etc/kafka/log4j.properties"}],"image":"solsson/kafka:2.2.1@sha256:450c6fdacae3f89ca28cecb36b2f120aad9b19583d68c411d551502ee8d0b09b","lifecycle":{"preStop":{"exec":{"command":["sh","-ce","kill -s TERM 1; while $(kill -0 1 2\u003e/dev/null); do sleep 1; done"]}}},"name":"zookeeper","ports":[{"containerPort":2181,"name":"client"},{"containerPort":2888,"name":"peer"},{"containerPort":3888,"name":"leader-election"}],"readinessProbe":{"exec":{"command":["/bin/sh","-c","[ \"imok\" = \"$(echo ruok | nc -w 1 -q 1 127.0.0.1 2181)\" ]"]}},"resources":{"limits":{"memory":"120Mi"},"requests":{"cpu":"10m","memory":"100Mi"}},"volumeMounts":[{"mountPath":"/etc/kafka","name":"config"},{"mountPath":"/var/lib/zookeeper","name":"data"}]}],"initContainers":[{"command":["/bin/bash","/etc/kafka-configmap/init.sh"],"env":[{"name":"PZOO_REPLICAS","value":"1"},{"name":"ZOO_REPLICAS","value":"0"}],"image":"solsson/kafka-initutils@sha256:f6d9850c6c3ad5ecc35e717308fddb47daffbde18eb93e98e031128fe8b899ef","name":"init-config","volumeMounts":[{"mountPath":"/etc/kafka-configmap","name":"configmap"},{"mountPath":"/etc/kafka","name":"config"},{"mountPath":"/var/lib/zookeeper","name":"data"}]}],"terminationGracePeriodSeconds":10,"volumes":[{"emptyDir":{},"name":"data"},{"configMap":{"name":"zookeeper-config"},"name":"configmap"},{"emptyDir":{},"name":"config"}]}},"updateStrategy":{"type":"RollingUpdate"},"volumeClaimTemplates":[]}}
    creationTimestamp: "2020-01-08T13:57:27Z"
    generation: 1
    name: pzoo
    namespace: kafka
    resourceVersion: "249795"
    selfLink: /apis/apps/v1/namespaces/kafka/statefulsets/pzoo
    uid: 9421009c-ab5e-473c-a275-5782d987d8f4
  spec:
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: zookeeper
        storage: persistent
    serviceName: pzoo
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: zookeeper
          chaos: immune
          storage: persistent
      spec:
        containers:
        - command:
          - ./bin/zookeeper-server-start.sh
          - /etc/kafka/zookeeper.properties
          env:
          - name: KAFKA_LOG4J_OPTS
            value: -Dlog4j.configuration=file:/etc/kafka/log4j.properties
          image: solsson/kafka:2.2.1@sha256:450c6fdacae3f89ca28cecb36b2f120aad9b19583d68c411d551502ee8d0b09b
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - sh
                - -ce
                - kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done
          name: zookeeper
          ports:
          - containerPort: 2181
            name: client
            protocol: TCP
          - containerPort: 2888
            name: peer
            protocol: TCP
          - containerPort: 3888
            name: leader-election
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - '[ "imok" = "$(echo ruok | nc -w 1 -q 1 127.0.0.1 2181)" ]'
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 120Mi
            requests:
              cpu: 10m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/kafka
            name: config
          - mountPath: /var/lib/zookeeper
            name: data
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/bash
          - /etc/kafka-configmap/init.sh
          env:
          - name: PZOO_REPLICAS
            value: "1"
          - name: ZOO_REPLICAS
            value: "0"
          image: solsson/kafka-initutils@sha256:f6d9850c6c3ad5ecc35e717308fddb47daffbde18eb93e98e031128fe8b899ef
          imagePullPolicy: IfNotPresent
          name: init-config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/kafka-configmap
            name: configmap
          - mountPath: /etc/kafka
            name: config
          - mountPath: /var/lib/zookeeper
            name: data
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: data
        - configMap:
            defaultMode: 420
            name: zookeeper-config
          name: configmap
        - emptyDir: {}
          name: config
    updateStrategy:
      type: RollingUpdate
  status:
    collisionCount: 0
    currentReplicas: 1
    currentRevision: pzoo-578c78dc7f
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: pzoo-578c78dc7f
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"StatefulSet","metadata":{"annotations":{},"name":"zoo","namespace":"kafka"},"spec":{"podManagementPolicy":"Parallel","replicas":0,"selector":{"matchLabels":{"app":"zookeeper","storage":"persistent-regional"}},"serviceName":"zoo","template":{"metadata":{"annotations":null,"labels":{"app":"zookeeper","storage":"persistent-regional"}},"spec":{"containers":[{"command":["./bin/zookeeper-server-start.sh","/etc/kafka/zookeeper.properties"],"env":[{"name":"KAFKA_LOG4J_OPTS","value":"-Dlog4j.configuration=file:/etc/kafka/log4j.properties"}],"image":"solsson/kafka:2.2.1@sha256:450c6fdacae3f89ca28cecb36b2f120aad9b19583d68c411d551502ee8d0b09b","lifecycle":{"preStop":{"exec":{"command":["sh","-ce","kill -s TERM 1; while $(kill -0 1 2\u003e/dev/null); do sleep 1; done"]}}},"name":"zookeeper","ports":[{"containerPort":2181,"name":"client"},{"containerPort":2888,"name":"peer"},{"containerPort":3888,"name":"leader-election"}],"readinessProbe":{"exec":{"command":["/bin/sh","-c","[ \"imok\" = \"$(echo ruok | nc -w 1 -q 1 127.0.0.1 2181)\" ]"]}},"resources":{"limits":{"memory":"120Mi"},"requests":{"cpu":"10m","memory":"100Mi"}},"volumeMounts":[{"mountPath":"/etc/kafka","name":"config"},{"mountPath":"/var/lib/zookeeper","name":"data"}]}],"initContainers":[{"command":["/bin/bash","/etc/kafka-configmap/init.sh"],"env":[{"name":"PZOO_REPLICAS","value":"1"},{"name":"ZOO_REPLICAS","value":"0"},{"name":"ID_OFFSET","value":"2"}],"image":"solsson/kafka-initutils@sha256:f6d9850c6c3ad5ecc35e717308fddb47daffbde18eb93e98e031128fe8b899ef","name":"init-config","volumeMounts":[{"mountPath":"/etc/kafka-configmap","name":"configmap"},{"mountPath":"/etc/kafka","name":"config"},{"mountPath":"/var/lib/zookeeper","name":"data"}]}],"terminationGracePeriodSeconds":10,"volumes":[{"emptyDir":{},"name":"data"},{"configMap":{"name":"zookeeper-config"},"name":"configmap"},{"emptyDir":{},"name":"config"}]}},"updateStrategy":{"type":"RollingUpdate"},"volumeClaimTemplates":[]}}
    creationTimestamp: "2020-01-08T13:57:27Z"
    generation: 1
    name: zoo
    namespace: kafka
    resourceVersion: "249741"
    selfLink: /apis/apps/v1/namespaces/kafka/statefulsets/zoo
    uid: ae7c1071-4848-411d-b3a0-94d0cbc462da
  spec:
    podManagementPolicy: Parallel
    replicas: 0
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: zookeeper
        storage: persistent-regional
    serviceName: zoo
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: zookeeper
          choas: immune
          storage: persistent-regional
      spec:
        containers:
        - command:
          - ./bin/zookeeper-server-start.sh
          - /etc/kafka/zookeeper.properties
          env:
          - name: KAFKA_LOG4J_OPTS
            value: -Dlog4j.configuration=file:/etc/kafka/log4j.properties
          image: solsson/kafka:2.2.1@sha256:450c6fdacae3f89ca28cecb36b2f120aad9b19583d68c411d551502ee8d0b09b
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - sh
                - -ce
                - kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done
          name: zookeeper
          ports:
          - containerPort: 2181
            name: client
            protocol: TCP
          - containerPort: 2888
            name: peer
            protocol: TCP
          - containerPort: 3888
            name: leader-election
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - '[ "imok" = "$(echo ruok | nc -w 1 -q 1 127.0.0.1 2181)" ]'
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 120Mi
            requests:
              cpu: 10m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/kafka
            name: config
          - mountPath: /var/lib/zookeeper
            name: data
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - /bin/bash
          - /etc/kafka-configmap/init.sh
          env:
          - name: PZOO_REPLICAS
            value: "1"
          - name: ZOO_REPLICAS
            value: "0"
          - name: ID_OFFSET
            value: "2"
          image: solsson/kafka-initutils@sha256:f6d9850c6c3ad5ecc35e717308fddb47daffbde18eb93e98e031128fe8b899ef
          imagePullPolicy: IfNotPresent
          name: init-config
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/kafka-configmap
            name: configmap
          - mountPath: /etc/kafka
            name: config
          - mountPath: /var/lib/zookeeper
            name: data
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 10
        volumes:
        - emptyDir: {}
          name: data
        - configMap:
            defaultMode: 420
            name: zookeeper-config
          name: configmap
        - emptyDir: {}
          name: config
    updateStrategy:
      type: RollingUpdate
  status:
    collisionCount: 0
    currentRevision: zoo-846c6f99c6
    observedGeneration: 1
    replicas: 0
    updateRevision: zoo-846c6f99c6
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
